//[Ex06.java]
//아래의 설명 중 틀린 것을 찾아서 수정해 보세요.
//(1) 변수한개에는 동시에 여러 개의 값을 담을 수 있다.
//(2) 변수는 선언시에 사용한 타입의 값만 저장할 수 있다.
//(3) 변수는 초기값이 저장되지 않아도 읽을 수 있다.
//(4) 모든 자료형의 변수는 동일한 방식으로 저장된다.
//(5) double형은 float보다 큰 수를 담을 수 있다.
//(6) int, float, char, String은 모두 기본자료형에 속한다
//(7) final로 선언된 변수는 수정이 가능하다
//(8) long형에는 항상 ‘L’을 붙여서 대입해야 한다.
//(9) float형에는 항상 ‘F’을 붙여서 대입해야 한다.

//1/ 변수한개에는 동시에 여러 개의 값을 담을 수 있다: 이 설명은 틀렸습니다. 단일 변수에 여러 개의 값을 동시에 저장할 수 있는 것은 아닙니다.
//배열이나 컬렉션 같은 데이터 구조를 사용하지 않는 한, 변수 한 개에는 하나의 값만 저장할 수 있습니다. 
//이를 **"변수 한 개에는 하나의 값만 담을 수 있다"**로 수정해야 합니다.
//
//2/ 변수는 선언시에 사용한 타입의 값만 저장할 수 있다: 이 설명은 정확합니다. 자바는 정적 타입 언어이므로, 변수에 할당할 수 있는 값의 타입은 변수 선언 시 결정됩니다.
//
//3/ 변수는 초기값이 저장되지 않아도 읽을 수 있다: 이 설명은 부정확합니다. 로컬 변수는 선언된 후 초기화되지 않으면 읽을 수 없습니다. 
//클래스의 멤버 변수나 인스턴스 변수는 기본값을 가질 수 있지만, 로컬 변수에 대해서는 이를 **"로컬 변수는 초기화되지 않으면 읽을 수 없다"**로 수정해야 합니다.
//
//4/ 모든 자료형의 변수는 동일한 방식으로 저장된다: 이 설명은 틀렸습니다. 
//기본 자료형(primitive types)과 참조 자료형(reference types)은 메모리에 저장되는 방식이 다릅니다.
//기본 자료형은 값 자체가 메모리에 직접 저장되는 반면, 참조 자료형은 객체의 참조(주소)가 저장됩니다.
//이를 **"기본 자료형과 참조 자료형은 메모리에 다르게 저장된다"**로 수정해야 합니다.
//
//5/ double형은 float보다 큰 수를 담을 수 있다: 이 설명은 정확합니다. double은 float보다 더 넓은 범위의 소수를 저장할 수 있습니다.
//
//6/ int, float, char, String은 모두 기본자료형에 속한다: 이 설명은 틀렸습니다. 
//String은 기본 자료형이 아니라 참조 자료형입니다. 나머지 int, float, char는 기본 자료형에 속합니다. 
//이를 **"int, float, char은 기본자료형에 속하고, String은 참조자료형에 속한다"**로 수정해야 합니다.
//
//7/ final로 선언된 변수는 수정이 가능하다: 이 설명은 틀렸습니다. final로 선언된 변수는 한 번 초기화하면 그 값을 변경할 수 없습니다. 이를 **"final로 선언된 변수는 수정할 수 없다"**로 수정해야 합니다.
//
//8/ long형에는 항상 ‘L’을 붙여서 대입해야 한다: 이 설명은 기본적으로 정확합니다. long 타입의 값을 리터럴로 표현할 때는 숫자 뒤에 L을 붙여서 이것이 long 타입임을 명시해야 합니다.
//
//9/ float형에는 항상 ‘F’을 붙여서 대입해야 한다: 이 설명도 정확합니다. float 타입의 값을 리터럴로 표현할 때는 숫자 뒤에 F를 붙여서 이것이 float 타입임을 명시해야 합니다.